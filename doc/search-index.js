var searchIndex = JSON.parse('{\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":"ECNCNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLL","n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","cause","clone","clone_from","clone_into","cmp","collect","consume","count","deref","deref_mut","description","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","source","to_owned","to_string","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt"],"q":[[0,"either"]],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","","",""],"i":[0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2],"f":[0,0,0,0,0,[[[2,[1,1]],3],4],[[[2,[1,1]],3],4],[2,2],[[[2,[5,5]]]],[[[2,[5,5]]]],[[[2,[[5,[6]],[5,[6]]]]],6],[[[2,[[5,[7]],[5,[7]]]]],7],[[[2,[[5,[8]],[5,[8]]]]],8],[[[2,[[5,[9]],[5,[9]]]]],9],[[[10,[2]]],[[2,[10,10]]]],[[[10,[2]]],[[2,[10,10]]]],[[[2,[11,11]]]],[2,2],[[[2,[[11,[8]],[11,[8]]]]],8],[[[2,[[11,[6]],[11,[6]]]]],6],[[[2,[[11,[7]],[11,[7]]]]],7],[[[2,[11,11]]]],[[[2,[[11,[9]],[11,[9]]]]],9],[[]],[[]],[[[2,[12,12]]],[[13,[12]]]],[[[2,[14,14]]],[[2,[14,14]]]],[[[2,[14,14]],[2,[14,14]]]],[[]],[[[2,[15,15]],[2,[15,15]]],16],[[[2,[1,1]]],17],[[[2,[18,18]],19]],[[[2,[1,1]]],19],[[[2,[20,20]]]],[[[2,[21,21]]]],[[[2,[12,12]]],7],[[2,22,22]],[[[2,[23,23]]]],[[2,22,22]],[[[2,[24,24]],[2,[24,24]]],4],[[[2,[25]],7]],[[[2,[25]],7]],[[[2,[26,26]],27]],[[[2,[28,28]]],[[28,[2]]]],[2],[[[2,[13,13]]],[[13,[2]]]],[[[2,[28,28]]],[[28,[2]]]],[2],[[[2,[18,18]]],29],[[[2,[1,1]],3],13],[[[2,[1,1]],3],13],[2,2],[[[2,[30,30]]],29],[[[2,[31,31]],32],33],[[[2,[25,25]],32],33],[[[2,[1,1]],3]],0,[[[2,[1,1]],3]],[[]],[28,2],[[[2,[34,34]],35]],[2,28],[[]],[[]],[2],[[]],[[[2,[27,27]]],2],[2,4],[2,4],[[[2,[1,1]]],13],[2,13],[[2,22],2],[2],[[[2,[36]]],36],[[2,22]],[[[2,[37,37]]],19],[[2,22],2],[[2,22],2],[[2,22],2],[[[2,[1,1]]],13],[[[2,[38,38]]],13],[[[2,[1,1]],19],13],[[[2,[39,39]],[2,[39,39]]],[[13,[16]]]],[[[2,[1,1]],3]],[[[10,[[2,[40,40]]]],41],42],[[[2,[1,1]],3],[[13,[19]]]],[43],[[[2,[44,44]]],[[29,[19]]]],[[[2,[44,44]]],29],[[[2,[18,18]],45],[[29,[19]]]],[[[2,[44,44]],[47,[46]]],[[29,[19]]]],[[[2,[44,44]],45],[[29,[19]]]],[[[2,[18,18]],46,[47,[46]]],[[29,[19]]]],[[[2,[38,38]],3],13],[[[2,[38,38]],3]],[2,13],[[2,22],2],[2],[[[2,[36]]],36],[[2,22]],[[[2,[48,48]],49],[[29,[50]]]],[[[2,[1,1]]]],[[[2,[12,12]]],[[13,[12]]]],[[]],[[],45],[[],28],[[],28],0,0,[[],51],[[[2,[25]]]],[[[2,[25]]]],[[[2,[30,30]]],[[29,[19]]]],[[[2,[30,30]]],29],[[[2,[30,30]],52],29]],"c":[],"p":[[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[8,"AsMut"],[3,"CStr"],[15,"str"],[3,"Path"],[3,"OsStr"],[3,"Pin"],[8,"AsRef"],[8,"Error"],[4,"Option"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[8,"BufRead"],[15,"usize"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[8,"PartialEq"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[4,"Result"],[6,"Result"],[8,"Write"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Read"],[3,"String"],[15,"u8"],[3,"Vec"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[3,"Arguments"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","t":"NNENEENNEINNNNNNEINNNIENNNFLLLFLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFOLLLLLLLLLLLLLFLLLLLLLFLFLLLLLLLLLLLLFLLLLLLLFLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLFLLFLFLLLLLLLLLLLLLLLLLLLLOLLLLLLFOFLLFLFLLLLLLLLLLLLLLLLLLLFLLLFLLFLFLLLLLLLFLFKLFLLLLLLLLLFLLLFKLLLLLLLLLLLLLLLFLLFFFLLLLLLLFFFLLLLLLLLLLLLFLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLFFLLDDDDGDDDGGGGGGDDDDDDDDDGDDDGDDDGDGGGGDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLI","n":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","cause","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","consume","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","description","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max_set","max_set_by","max_set_by_key","merge","merge","merge_by","merge_join_by","merge_join_by","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","or","or_default","or_else","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","poll","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","provide","put_back","put_back_n","rciter","read","read_exact","read_line","read_to_end","read_to_string","read_until","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","seek","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","write","write_all","write_fmt","zip","zip_eq","zip_eq","zip_longest","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","provide","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":[[0,"itertools"],[371,"itertools::structs"],[1318,"itertools::traits"]],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","","Takes two iterables and creates a new iterator over both …","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","","","","","","","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","","","","Converts the arguments to iterators and zips them.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[12,29,0,29,0,0,28,52,0,0,28,5,12,52,28,27,0,0,27,27,28,0,0,5,12,52,0,5,146,146,0,5,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,5,5,12,0,146,146,5,52,12,27,28,29,5,52,12,27,28,29,12,146,5,0,0,146,146,5,12,27,28,29,5,5,12,27,28,29,0,5,146,5,146,146,146,146,0,146,0,5,146,5,146,146,146,146,146,146,5,5,5,0,146,146,146,146,5,5,5,0,5,12,27,28,29,0,146,5,5,5,5,5,5,5,5,5,146,146,5,5,146,146,146,146,5,12,5,5,5,12,27,28,29,0,5,146,146,146,146,146,5,146,146,146,5,5,52,12,27,28,29,146,12,12,5,12,0,146,146,0,146,0,146,5,5,52,12,12,27,28,29,5,146,146,146,146,5,28,29,5,5,27,0,12,29,5,12,5,12,0,0,0,146,146,0,146,0,146,5,5,12,5,12,5,5,5,5,5,12,146,5,12,146,146,5,12,0,146,146,146,0,146,146,0,146,0,146,146,146,146,146,146,146,0,146,0,93,146,0,5,5,146,5,12,12,12,146,5,0,5,146,146,0,98,146,146,5,5,146,146,146,146,146,146,146,146,146,146,146,0,146,5,0,0,0,5,5,5,5,5,5,12,0,0,0,5,5,5,12,5,12,5,5,5,5,146,5,0,146,146,146,146,146,146,146,5,146,0,146,146,146,5,12,27,28,29,5,0,146,146,5,52,12,27,28,29,5,52,12,27,28,29,146,146,146,5,52,12,27,28,29,0,146,146,5,5,146,146,146,5,5,5,0,0,146,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,108,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,89,37,64,84,90,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,109,110,115,114,127,80,137,125,124,129,128,135,136,94,89,37,64,84,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,109,110,115,114,127,80,137,125,124,129,128,135,136,94,62,63,130,78,90,100,91,108,129,128,138,139,89,122,62,37,64,84,90,99,100,105,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,16,71,70,70,70,70,70,70,70,70,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,62,108,19,63,130,39,39,39,39,39,39,39,39,39,39,78,77,140,78,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,94,94,94,94,94,94,94,94,94,94,94,94,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,125,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,77,92,95,97,140,109,110,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,108,37,90,91,108,78,78,78,78,78,78,78,78,78,37,89,122,62,37,64,142,138,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,39,39,39,39,39,39,39,39,39,38,16,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,94,94,94,94,94,94,94,94,94,94,94,64,104,130,39,39,39,39,39,39,39,39,39,39,95,110,115,129,128,136,94,94,94,94,94,94,94,94,94,94,94,94,90,108,92,97,97,108,92,97,109,78,16,108,109,110,92,89,122,62,64,84,90,99,100,105,132,91,74,75,108,19,120,131,63,104,130,39,39,39,39,39,39,39,39,39,39,16,77,92,95,97,140,109,110,115,114,80,141,137,129,128,135,136,94,94,94,94,94,94,94,94,94,94,94,94,127,78,89,37,64,84,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,109,110,115,114,127,80,137,125,124,129,128,135,136,94,16,71,70,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,89,122,62,37,64,72,142,138,23,143,139,84,90,99,100,105,132,91,74,75,108,19,18,120,131,123,63,104,130,39,38,16,71,70,78,77,92,95,97,140,109,110,115,114,127,80,141,137,125,124,26,129,128,135,136,94,108,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[[[5,[4,4]],2],3],[6,3],[6,3],[[1,2],3],[[[5,[4,4]],2],3],[[[5,[[8,[7]],[8,[7]]]]],7],[5,5],[[[5,[8,8]]]],[[[5,[[8,[9]],[8,[9]]]]],9],[[[5,[8,8]]]],[[[5,[[8,[10]],[8,[10]]]]],10],[[[5,[[8,[11]],[8,[11]]]]],11],[12,12],[[[13,[5]]],[[5,[13,13]]]],[[[13,[5]]],[[5,[13,13]]]],[[[5,[14,14]]]],[[[5,[[14,[10]],[14,[10]]]]],10],[[[5,[14,14]]]],[[[5,[[14,[11]],[14,[11]]]]],11],[[[5,[[14,[9]],[14,[9]]]]],9],[[[5,[[14,[7]],[14,[7]]]]],7],[5,5],[12,12],[[1,1]],[6,[[17,[15,[16,[6]]]]]],[[6,2],[[18,[6,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,15],[[6,1],[[19,[6]]]],[[[5,[20,20]]],[[15,[20]]]],[[1,1],21],0,[[6,22],[[23,[6]]]],[[[0,[6,24,4,25]]],[[26,[[0,[6,24,4,25]],[0,[0,24]]]]]],[[[5,[24,24]]],[[5,[24,24]]]],[[[12,[24,24]]],[[12,[24,24]]]],[[[27,[24]]],[[27,[24]]]],[[[28,[24]]],[[28,[24]]]],[[[29,[24]]],[[29,[24]]]],[[[5,[24,24]],[5,[24,24]]]],[[]],[[]],[[]],[[]],[[]],[1,30],[[[5,[31,31]],[5,[31,31]]],32],[[6,2],[[33,[6,2]]]],[[[5,[4,4]]],34],[[[0,[6,4]]],[[15,[35]]]],[6,36],[[6,22],[[37,[6]]]],[[6,22],[[38,[6]]]],[1],[6],[1,39],[[[5,[40,40]],22]],[[6,41],3],[[[5,[4,4]]],22],[6,[[42,[22]]]],[[6,2],[[42,[[0,[43,44]],22]]]],[6,[[45,[6]]]],[[6,2],[[46,[6,2]]]],[[6,2],[[47,[6,2]]]],[6,[[48,[6]]]],[[[5,[49,49]]]],[[[5,[50,50]]]],[[[5,[20,20]]],11],[[1,1,51],[[15,[52]]]],[[6,22],6],[[[0,[6,53]],22],[[0,[6,53]]]],[6,[[54,[6]]]],[[6,2],[[55,[6,[0,[43,44]],2]]]],[[5,56,56]],[[[5,[57,57]]]],[[5,56,56]],[1,58],[[[5,[[41,[[41,[[41,[41]]]]]],[41,[[41,[[41,[41]]]]]]]],[5,[[41,[[41,[[41,[41]]]]]],[41,[[41,[[41,[41]]]]]]]]],3],[[[12,[41,41]],[12,[41,41]]],3],[[[27,[41]],[27,[41]]],3],[[[28,[41]],[28,[41]]],3],[[[29,[41]],[29,[41]]],3],[[1,1],3],[6,[[17,[[16,[6]]]]]],[[[5,[59]],11]],[[[5,[59]],11]],[[[5,[60,60]],1]],[[[5,[17,17]]],[[17,[5]]]],[5],[[[5,[15,15]]],[[15,[5]]]],[[[5,[17,17]]],[[17,[5]]]],[5],[[[5,[40,40]]],[[17,[61]]]],[[[0,[4,6]],2],[[62,[[0,[4,6]],2]]]],[[[0,[4,6]],2],[[63,[[0,[4,6]],2]]]],[[[5,[4,4]],2],15],[[[5,[4,4]],2],15],[[6,2],15],[[6,2],15],[2,15],[[[0,[4,6]]],[[64,[[0,[4,6]],1]]]],[5,5],[12,12],[[[5,[65,65]]],[[17,[61]]]],[[[5,[59,59]],66],[[17,[67]]]],[[[5,[68,68]],66],[[17,[67]]]],[[[12,[59,59]],66],69],[[[27,[59]],66],69],[[[28,[59]],66],69],[[[29,[59]],66],69],[[1,2]],[[[5,[4,4]],2]],[[6,2],15],[[4,2],17],[[4,2],15],[[4,2],17],[[6,2],29],[[[5,[4,4]],2]],[[6,2]],[[6,11],[[70,[6]]]],[[6,11,2],[[71,[6,2]]]],[17,5],[[]],[[]],[[]],[[]],[[]],[[]],[[6,2],[[72,[41,6,2]]]],[12,3],[12,3],[[[5,[44,44]],73]],[[[12,[44,44]],73]],[[1,1],74],[[6,1],[[74,[6]]]],[[6,1],[[75,[6]]]],[1,76],[6,[[76,[6]]]],[[1,2],[[77,[2]]]],[[6,2],[[77,[6,2]]]],[[]],[5,17],[[]],[12,[[15,[5]]]],[[]],[[]],[[]],[[]],[[]],[[[0,[4,6]]],[[42,[[0,[44,43]],36]]]],[[[0,[4,6]],51],[[42,[[0,[44,43]],36]]]],[[[0,[4,6]]],[[78,[[0,[4,6]]]]]],[[[0,[4,6]],2],[[79,[[0,[4,6]],2]]]],[5],[28],[29],[[]],[[[5,[1,1]]],5],[[[27,[24]]],15],0,[12,3],[29,3],[5,3],[12,3],[5,3],[12,3],[2,[[80,[2]]]],0,[[1,11],81],[11,81],[[6,22],82],[1,83],[6,83],0,[[6,2],[[84,[2]]]],[[[5,[4,4]]],15],[5,15],[12,15],[[5,56],5],[[12,56],12],[5],[[[5,[85]]],85],[[5,56]],[[[5,[25,25]]],22],[[5,56],5],[[12,56,56],12],[6,[[86,[6]]]],[[5,56],5],[[12,56],12],[[[0,[4,6]],2],[[87,[[0,[4,6]],2]]]],[[[0,[4,6]],2],[[87,[[0,[4,6]],2]]]],[[5,56],5],[[12,56],12],[1,15],[6,36],[[6,2],36],[[6,2],36],[[1,1],88],[[6,1],[[88,[6]]]],[[6,1,2],[[89,[6,2]]]],[[1,1,2],[[90,[2]]]],[[6,1,2],[[90,[6,2]]]],[1,15],[6,36],[[6,2],36],[[6,2],36],[6,27],[[6,2],27],[[6,2],27],[6,91],[1,92],[6,[[92,[6]]]],[1],[[]],[[[0,[6,93]]]],[[],94],[[[5,[4,4]]],15],[[[5,[53,53]]],15],[[[0,[6,4]]],[[15,[35]]]],[[[5,[4,4]],22],15],[12],[[[12,[85,85]]]],[[12,56,56]],[[6,22,2],[[95,[6,2]]]],[[[5,[[96,[[96,[[96,[96]]]]]],[96,[[96,[[96,[96]]]]]]]],[5,[[96,[[96,[[96,[96]]]]]],[96,[[96,[[96,[96]]]]]]]]],[[15,[32]]]],[[1,2],22],[[[5,[4,4]],2]],[[6,2]],[[[0,[4,6]]]],[1,97],[56,15],[[[0,[6,98]],2],[[99,[[0,[6,98]],2]]]],[[6,22],[[100,[6]]]],[[[13,[[5,[101,101]]]],102],103],[[[5,[4,4]],2],[[15,[22]]]],[6,[[15,[22]]]],[[6,2],[[15,[22]]]],[[6,2],[[15,[22]]]],[6,[[15,[22]]]],[[6,2],[[15,[22]]]],[[6,2],[[15,[22]]]],[6,[[27,[22]]]],[[6,2],[[27,[22]]]],[[6,2],[[27,[22]]]],[[6,2],[[104,[6,2]]]],[6,[[105,[6]]]],[[1,56],17],[6,[[15,[106]]]],[107],[1,108],[1,109],[1,110],[[[5,[111,111]]],[[17,[22,61]]]],[[[5,[111,111]]],[[17,[61]]]],[[[5,[40,40]],81],[[17,[22,61]]]],[[[5,[111,111]],[36,[112,113]]],[[17,[22,61]]]],[[[5,[111,111]],81],[[17,[22,61]]]],[[[5,[40,40]],112,[36,[112,113]]],[[17,[22,61]]]],[[12,56]],[2,[[114,[2]]]],[[24,22],[[115,[24]]]],[1,116],[[[5,[53,53]],2],15],[[[5,[53,53]],2]],[5,15],[12,15],[[5,56],5],[[12,56],12],[5],[[[5,[85]]],85],[[5,56]],[[[5,[117,117]],118],[[17,[119,61]]]],[[4,1],22],[[[5,[4,4]]]],[1,82],[6,82],[[6,2],82],[[6,2],82],[[6,2],82],[6,82],[[6,2],82],[[6,2],82],[[[5,[20,20]]],[[15,[20]]]],[[6,22],[[120,[6]]]],0,[6,[[15,[121]]]],[[24,2],[[122,[24,2]]]],[6],[[]],[[]],[[]],[[]],[[]],[[],81],0,[[6,2],15],[[[0,[6,4]]],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[0,[6,24]]],[[123,[[0,[6,24]],[0,[[0,[6,24]]]]]]]],[[[0,[6,4]]],[[124,[[0,[6,4]],35]]]],[[[0,[6,4]]],[[125,[[0,[6,4]],35]]]],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[2,[[127,[2]]]],[6,[[128,[6]]]],[[6,2],[[129,[6,[0,[43,44]],2]]]],[[[5,[59]]]],[[[5,[59]]]],[[6,2],[[130,[6,2]]]],[[[0,[6,4]]],[[131,[[0,[6,4]]]]]],[6,[[132,[6]]]],[[[5,[65,65]]],[[17,[22,61]]]],[[[5,[65,65]]],[[17,[61]]]],[[[5,[65,65]],133],[[17,[61]]]],[[1,1],134],[[1,1],135],[[6,1],[[135,[6]]]],[[6,1],[[136,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[[108,[4]],2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[89,[4,4,24]]],[[89,[4,4,24]]]],[[[37,[[0,[24,4]]]]],[[37,[[0,[24,4]]]]]],[[[64,[[0,[4,24]],1]]],[[64,[[0,[4,24]],1]]]],[[[84,[[0,[4,24]],24]]],[[84,[[0,[4,24]],24]]]],[[[90,[4,4,24]]],[[90,[4,4,24]]]],[[[100,[[0,[24,4]]]]],[[100,[[0,[24,4]]]]]],[[[105,[[0,[24,4]]]]],[[105,[[0,[24,4]]]]]],[[[132,[[0,[24,4]]]]],[[132,[[0,[24,4]]]]]],[[[91,[[0,[4,24,24]]]]],[[91,[[0,[4,24,24]]]]]],[[[74,[24,24]]],[[74,[24,24]]]],[[[75,[[0,[4,24]],[0,[4,24]]]]],[[75,[[0,[4,24]],[0,[4,24]]]]]],[[[108,[[0,[4,24]]]]],[[108,[[0,[4,24]]]]]],[[[19,[[0,[4,24]],24]]],[[19,[[0,[4,24]],24]]]],[[[18,[24,24]]],[[18,[24,24]]]],[[[120,[24]]],[[120,[24]]]],[[[131,[24]]],[[131,[24]]]],[[[123,[[0,[4,24]],[0,[[0,[[0,[4,24]]]],24]]]]],[[123,[[0,[4,24]],[0,[[0,[[0,[4,24]]]],24]]]]]],[[[63,[24,24]]],[[63,[24,24]]]],[[[104,[24,24]]],[[104,[24,24]]]],[[[130,[24,24]]],[[130,[24,24]]]],[[[39,[[0,[24,4]]]]],[[39,[[0,[24,4]]]]]],[[[38,[[0,[4,24]]]]],[[38,[[0,[4,24]]]]]],[[[16,[[0,[4,24]]]]],[[16,[[0,[4,24]]]]]],[[[71,[24,24]]],[[71,[24,24]]]],[[[70,[24]]],[[70,[24]]]],[[[78,[24]]],[[78,[24]]]],[[[77,[[0,[4,24]],24]]],[[77,[[0,[4,24]],24]]]],[[[92,[[0,[4,24]]]]],[[92,[[0,[4,24]]]]]],[[[95,[24,24]]],[[95,[24,24]]]],[[[97,[[0,[4,24]]]]],[[97,[[0,[4,24]]]]]],[[[109,[[0,[24,4]]]]],[[109,[[0,[24,4]]]]]],[110,110],[[[115,[24]]],[[115,[24]]]],[[[114,[24]]],[[114,[24]]]],[[[127,[24,24]]],[[127,[24,24]]]],[[[80,[24,24]]],[[80,[24,24]]]],[[[137,[[0,[35,24]]]]],[[137,[[0,[35,24]]]]]],[[[125,[[0,[4,24]],[0,[35,24]]]]],[[125,[[0,[4,24]],[0,[35,24]]]]]],[[[124,[[0,[4,24]],[0,[35,24]]]]],[[124,[[0,[4,24]],[0,[35,24]]]]]],[[[129,[[0,[24,4]],24,24]]],[[129,[[0,[24,4]],24,24]]]],[[[128,[[0,[24,4]]]]],[[128,[[0,[24,4]]]]]],[[[135,[24,24]]],[[135,[24,24]]]],[[[136,[24,24]]],[[136,[24,24]]]],[[[94,[24]]],[[94,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[62,[4,2]]],34],[[[63,[4,2]]],34],[[[130,[4,2]]],34],[[[78,[4]]],[[42,[[0,[44,43]],[0,[85,60]]]]]],[[[90,[4,4,2]]],22],[[[100,[4]]],22],[[[91,[[0,[4,24]]]]],22],[[[108,[4]]],22],[[[129,[4,[0,[43,44]],2]]],22],[[[128,[4]]],22],[[[138,[4]]]],[[[139,[4]]]],[[[89,[[0,[4,59]],[0,[4,59]]]],66],69],[[[122,[[0,[4,59]]]],66],69],[[[62,[59]],66],69],[[[37,[[0,[4,59]]]],66],69],[[[64,[[0,[4,59]],1]],66],69],[[[84,[[0,[4,59]]]],66],69],[[[90,[[0,[4,59]],[0,[4,59]]]],66],69],[[[99,[[0,[4,59]]]],66],69],[[[100,[[0,[4,59]]]],66],69],[[[105,[[0,[4,59]]]],66],69],[[[91,[[0,[4,24,59]]]],66],69],[[[74,[59,59]],66],69],[[[75,[[0,[4,59]],[0,[4,59]]]],66],69],[[[108,[[0,[4,59]]]],66],69],[[[19,[[0,[4,59]],59]],66],69],[[[18,[59]],66],69],[[[120,[59]],66],69],[[[131,[59]],66],69],[[[123,[[0,[4,59]],[0,[[0,[[0,[4,59]]]],59]]]],66],69],[[[63,[59]],66],69],[[[104,[59]],66],69],[[[130,[59]],66],69],[[[39,[[0,[4,59]],59]],66],69],[[[38,[[0,[4,59]]]],66],69],[[[16,[[0,[4,59]]]],66],69],[[[16,[4]],66],69],[[[71,[4,2]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[70,[4]],66],69],[[[78,[59]],66],69],[[[77,[[0,[4,59]],59]],66],69],[[[92,[[0,[4,59]]]],66],69],[[[95,[59]],66],69],[[[97,[[0,[4,59]]]],66],69],[[[140,[59,59]],66],69],[[[109,[[0,[59,4]]]],66],69],[[[110,[59]],66],69],[[[115,[59]],66],69],[[114,66],69],[[[127,[59]],66],69],[[[80,[59]],66],69],[[[141,[[0,[4,59]]]],66],69],[[[137,[[0,[35,59]]]],66],69],[[[125,[[0,[4,59]],[0,[35,59]]]],66],69],[[[124,[[0,[4,59]],[0,[35,59]]]],66],69],[[[26,[[0,[4,24,59]],[0,[0,24,59]]]],66],69],[[[129,[[0,[4,59]],[0,[59,44,43]]]],66],69],[[[128,[[0,[4,59]]]],66],69],[[[135,[59,59]],66],69],[[[136,[59,59]],66],69],[[[94,[59]],66],69],[[[62,[4,2]],2]],[[[108,[4]],2]],[[[19,[4,[0,[24,4]]]],2]],[[[63,[4,2]],2]],[[[130,[4,2]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[39,[4]],2]],[[[78,[4]],24,2],[[42,[[0,[44,43]],24]]]],[[[77,[4,0]],2]],[[[140,[4]],2]],[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[],94],[[],94],[[],94],[[],94],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[125,[4,35]]],[[137,[35]]]],[[]],[[]],[[]],[[]],[[]],[[[72,[41,4,2]]]],[[]],[[]],[[[23,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[110,[4]]],[[110,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[108,[4]]]],[[[37,[4]]],22],[[[90,[4,4,2]]],15],[[[91,[[0,[4,24]]]]],15],[[[108,[4]]],15],[[[78,[4]]],[[42,[[0,[44,43]],31]]]],[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[[78,[4]]],[[42,[[0,[44,43]],31]]]],[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[[78,[4]],2],[[42,[[0,[44,43]]]]]],[[[78,[4]]],[[42,[[0,[44,43]],[27,[31]]]]]],[[[78,[4]],2],[[42,[[0,[44,43]],27]]]],[[[78,[4]],2],[[42,[[0,[44,43]],27]]]],[[[37,[4]]],22],[[[89,[4,4,0]]],15],[[[122,[[0,[4,24]],2]]],15],[[[62,[4,2]]],15],[[[37,[4]]],15],[[[64,[4,1]]],15],[[[142,[41,4,2]]],15],[[[138,[41,4,2]]],15],[[[143,[4]]],15],[[[139,[4]]],15],[[[84,[4,0]]],15],[[[90,[4,4,2]]],15],[[[99,[98,2]]],15],[[[100,[4]]],15],[[[105,[4]]],15],[[[132,[4]]],15],[[[91,[[0,[4,24]]]]],15],[[[74,[4,4]]],15],[[[75,[4,4]]],15],[[[108,[4]]],15],[[[19,[4,[0,[24,4]]]]],15],[[[18,[4,2]]],15],[[[120,[4]]],15],[[[131,[4]]],15],[[[123,[4,[0,[4]]]]],15],[[[63,[4,2]]],15],[[[104,[4,2]]],15],[[[130,[4,2]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[39,[4]]],15],[[[38,[4]]],15],[[[16,[4]]],15],[[[77,[4,0]]],15],[[[92,[4]]],15],[[[95,[4,2]]],15],[[[97,[4]]],15],[[[140,[4]]],15],[[[109,[4]]],15],[[[110,[4]]],15],[[[115,[24]]],15],[[[114,[2]]],15],[[[127,[2]]],15],[[[80,[2]]],15],[[[141,[4]]],15],[[[137,[35]]],15],[[[125,[4,35]]],15],[[[124,[4,[0,[35,24]]]]],15],[[[26,[[0,[4,24]],[0,[0,24]]]]],15],[[[129,[4,[0,[43,44]],2]]],15],[[[128,[4]]],15],[[[135,[4,4]]],15],[[[136,[4,4]]],15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[[[64,[53,1]]],15],[[[104,[[0,[53,25]],2]]],15],[[[130,[53,2]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[39,[53]]],15],[[[95,[[0,[53,25]],2]]],15],[[[110,[53]]],15],[[[115,[24]]],15],[[[129,[53,[0,[43,44]],2]]],15],[[[128,[53]]],15],[[[136,[[0,[53,25]],[0,[53,25]]]]],15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[94,15],[[[90,[4,4,2]],22],15],[[[108,[4]],22],15],[[[92,[4]]],15],[[[97,[4]]],15],[[[97,[4]],22],15],[[[108,[4]],56],15],[[[92,[4]],56],15],[[[97,[4]],56],15],[[[109,[4]],56],15],[[[78,[4]]],[[42,[[0,[44,43]],[144,[[144,[[144,[144]]]]]]]]]],[107],[[[108,[4]]]],[[[109,[4]]]],0,[[[92,[4]]]],[[[89,[4,4,0]]]],[[[122,[[0,[4,24]],2]]]],[[[62,[4,2]]]],[[[64,[4,1]]]],[[[84,[4,0]]]],[[[90,[4,4,2]]]],[[[99,[98,2]]]],[[[100,[4]]]],[[[105,[4]]]],[[[132,[4]]]],[[[91,[[0,[4,24]]]]]],[[[74,[4,4]]]],[[[75,[4,4]]]],[[[108,[4]]]],[[[19,[4,[0,[24,4]]]]]],[[[120,[4]]]],[[[131,[4]]]],[[[63,[4,2]]]],[[[104,[4,2]]]],[[[130,[4,2]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[39,[4]]]],[[[16,[4]]]],[[[77,[4,0]]]],[[[92,[4]]]],[[[95,[4,2]]]],[[[97,[4]]]],[[[140,[4]]]],[[[109,[4]]]],[[[110,[4]]]],[[[115,[24]]]],[[[114,[2]]]],[[[80,[2]]]],[[[141,[4]]]],[[[137,[35]]]],[[[129,[4,[0,[43,44]],2]]]],[[[128,[4]]]],[[[135,[4,4]]]],[[[136,[4,4]]]],[94],[94],[94],[94],[94],[94],[94],[94],[94],[94],[94],[94],0,[[[78,[4]]],[[42,[[0,[44,43]],[145,[[145,[[145,[145]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],81],[[],81],[[],81],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[],126],[[[108,[4]]],[[108,[4]]]],0],"c":[150,153,156,228,297,321,367,406,423,425],"p":[[8,"IntoIterator"],[8,"FnMut"],[15,"bool"],[8,"Iterator"],[4,"Either"],[8,"Sized"],[3,"CStr"],[8,"AsMut"],[3,"OsStr"],[3,"Path"],[15,"str"],[4,"EitherOrBoth"],[3,"Pin"],[8,"AsRef"],[4,"Option"],[3,"ExactlyOneError"],[4,"Result"],[3,"Batching"],[3,"Product"],[8,"Error"],[3,"Chain"],[15,"usize"],[3,"IntoChunks"],[8,"Clone"],[8,"ExactSizeIterator"],[3,"CircularTupleWindows"],[4,"MinMaxResult"],[4,"Position"],[4,"FoldWhile"],[3,"Cloned"],[8,"Ord"],[4,"Ordering"],[6,"Coalesce"],[8,"FromIterator"],[8,"HomogeneousTuple"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[8,"BufRead"],[8,"PartialEq"],[3,"HashMap"],[8,"Eq"],[8,"Hash"],[6,"Dedup"],[6,"DedupBy"],[6,"DedupByWithCount"],[6,"DedupWithCount"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[4,"Diff"],[8,"DoubleEndedIterator"],[6,"Duplicates"],[6,"DuplicatesBy"],[8,"FnOnce"],[8,"Into"],[3,"Enumerate"],[8,"Debug"],[8,"Extend"],[3,"Error"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[8,"Write"],[3,"Formatter"],[3,"Error"],[8,"Display"],[6,"Result"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[8,"Hasher"],[3,"Interleave"],[3,"InterleaveShortest"],[6,"Intersperse"],[3,"IntersperseWith"],[3,"GroupingMap"],[6,"GroupingMapBy"],[3,"Iterate"],[3,"String"],[3,"IntoIter"],[6,"KMerge"],[3,"KMergeBy"],[8,"Default"],[6,"MapInto"],[6,"MapOk"],[6,"Merge"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"MultiProduct"],[3,"MultiPeek"],[8,"MultiUnzip"],[3,"Zip"],[3,"PadUsing"],[8,"PartialOrd"],[3,"PeekNth"],[8,"PeekingNext"],[3,"PeekingTakeWhile"],[3,"Permutations"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"Positions"],[3,"Powerset"],[8,"Product"],[3,"Demand"],[3,"PutBack"],[3,"PutBackN"],[3,"RcIter"],[8,"Read"],[15,"u8"],[3,"Global"],[3,"RepeatCall"],[3,"RepeatN"],[3,"Rev"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"Step"],[8,"Sum"],[3,"TakeWhileRef"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Unfold"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"Arguments"],[3,"Zip"],[3,"ZipEq"],[3,"ZipLongest"],[3,"TupleBuffer"],[3,"Group"],[3,"Chunk"],[3,"ProcessResults"],[3,"Tee"],[3,"Groups"],[3,"Chunks"],[8,"Mul"],[8,"Add"],[8,"Itertools"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[88,"num_traits::bounds"],[95,"num_traits::cast"],[130,"num_traits::float"],[239,"num_traits::identities"],[249,"num_traits::int"],[269,"num_traits::ops"],[276,"num_traits::ops::checked"],[292,"num_traits::ops::euclid"],[298,"num_traits::ops::inv"],[301,"num_traits::ops::mul_add"],[306,"num_traits::ops::overflowing"],[312,"num_traits::ops::saturating"],[321,"num_traits::ops::wrapping"],[333,"num_traits::pow"],[338,"num_traits::real"],[386,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,39,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,39,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,40,41,40,42,0,0,0,0,43,0,11,44,44,44,44,44,44,44,44,44,44,44,44,44,44,13,13,13,13,13,13,13,13,13,13,13,13,13,13,45,45,45,45,45,45,45,45,45,45,0,0,0,45,45,45,45,45,45,45,45,45,46,47,46,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,47,46,46,47,47,46,47,46,46,47,46,47,46,47,46,46,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,47,0,0,33,34,0,33,33,34,0,34,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,36,51,52,53,54,55,0,0,56,56,57,57,0,58,58,0,0,59,59,60,0,0,0,61,62,63,0,0,0,0,64,65,66,64,67,0,0,0,0,0,0,68,69,70,71,72,73,74,0,0,0,74,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,38,0,38,38,38,0,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,29]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[32,31],[[],31],[[],33],[[]],[[]],[[]],[[],34],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[35,33,36]],26],[[12,[[0,[35,33,36]]]]]],[[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]],26],[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[38,38],[[]],[[38,38],38],[[]],[[],31],[[],31],[38,38],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"numbers_rus":{"doc":"","t":"AAAAAAAADLLLFLLLLLLLLLLLLLAAFFFFFFFFFFFFFFFFFFFFFFFFAADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFFFFFFFFFFFFFFFAAFFFFFFFFFFFFFFFAAFFFFFFFFFFFFFFFFFFFF","n":["dataframe","double","equation","floats","integers","single","dataframe","dataframe","DataFrame","add_column","borrow","borrow_mut","dataframe_create","from","get_column","get_column_count","get_column_index","get_column_name","get_columns","get_data","get_row_count","into","new","try_from","try_into","type_id","double_vector","double_vector","two_vector_median","two_vector_median_float","two_vector_mode","two_vector_mode_float","vector_add","vector_add_float","vector_average","vector_average_float","vector_divide","vector_divide_float","vector_max","vector_max_float","vector_min","vector_min_float","vector_modulo","vector_modulo_float","vector_multiply","vector_multiply_float","vector_power","vector_power_float","vector_root","vector_root_float","vector_subtract","vector_subtract_float","equation","equation","Equation","EquationF","ZeroEquation","add_value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_a","get_a","get_b","get_b","get_error","get_operator","get_operator","get_sol","get_sol","get_sol","get_value","get_values","into","into","into","is_valid","move_to_sol","new","new","new","remove_value","set_a","set_a","set_b","set_b","set_operator","set_operator","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","base_float","base_float","add_float","divide_float","factorial_float","fibonacci_float","is_even_float","is_odd_float","is_perfect_cube_float","is_perfect_power_float","is_perfect_square_float","is_prime_float","modulo_float","multiply_float","power_float","root_float","subtract_float","base","base","add","divide","factorial","fibonacci","is_even","is_odd","is_perfect_cube","is_perfect_power","is_perfect_square","is_prime","modulo","multiply","power","root","subtract","single_vector","single_vector","vector_interquartile_range","vector_interquartile_range_float","vector_mean","vector_mean_float","vector_median","vector_median_float","vector_mode","vector_mode_float","vector_product","vector_product_float","vector_quartiles","vector_quartiles_float","vector_range","vector_range_float","vector_standard_deviation","vector_standard_deviation_float","vector_sum","vector_sum_float","vector_variance","vector_variance_float"],"q":[[0,"numbers_rus"],[6,"numbers_rus::dataframe"],[7,"numbers_rus::dataframe::dataframe"],[8,"numbers_rus::dataframe::dataframe::dataframe"],[26,"numbers_rus::double"],[27,"numbers_rus::double::double_vector"],[28,"numbers_rus::double::double_vector::double_vector"],[52,"numbers_rus::equation"],[53,"numbers_rus::equation::equation"],[54,"numbers_rus::equation::equation::equation"],[103,"numbers_rus::floats"],[104,"numbers_rus::floats::base_float"],[105,"numbers_rus::floats::base_float::base_float"],[120,"numbers_rus::integers"],[121,"numbers_rus::integers::base"],[122,"numbers_rus::integers::base::base"],[137,"numbers_rus::single"],[138,"numbers_rus::single::single_vector"],[139,"numbers_rus::single::single_vector::single_vector"]],"d":["","","","","","","","","A dataframe struct similar to pythons pandas dataframe but …","Adds a column to the dataframe","","","Creates a new dataframe","Returns the argument unchanged.","Returns the column names","Returns the column names","Returns the column names","Returns the column names","Returns the column names","Returns the data","Returns the column names","Calls <code>U::from(self)</code>.","Creates a new dataframe","","","","double_vector is a module providing various vector …","","Returns the median of two vectors as a string","Returns the median of two float vectors as a string","Returns the mode of two combined integer vectors as a …","","Returns the sum of two vectors as a string","Returns the sum of two float vectors as a string","Returns the average of two vectors as a string","Returns the average of two float vectors as a string","Returns the quotient of two vectors as a string","Returns the quotient of two float vectors as a string","Returns the maximum of two vectors as a string","Returns the maximum of two float vectors as a string","Returns the minimum of two vectors as a string","Returns the minimum of two float vectors as a string","Returns the remainder of two vectors as a string","Returns the modulo of two float vectors as a string","Returns the product of two vectors as a string","Returns the product of two float vectors as a string","Returns the power of two vectors as a string","Returns the power of two float vectors as a string","Returns the root of two vectors as a string","Returns the root of two float vectors as a string","Returns the difference of two vectors as a string","Returns the difference of two float vectors as a string","","","Equation struct that can be used to solve equations with …","EquationF is an equation similar to Equation, but with f64 …","ZeroEquation is an equation with a list of values on one …","adds a single value to the list of values","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","returns the a value","","returns the b value","","returns the difference between the solution and the sum of …","returns the operator","","Returns the solution to the equation","","returns the solution","returns the value at the given index","returns all the values in the equation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the values add up to the solution","","Creates a new equation","","","removes a single value from the list of values","sets the a value (first number) in the equation struct.  …","sets the a value (first number) in the equation struct.  …","sets the b value (second number) in the equation struct.  …","sets the b value (second number) in the equation struct.  …","sets the operator in the equation struct.  This will reset …","sets the operator in the equation struct.  This will reset …","","","","","","","","","","The <code>base_float</code> module provides various mathematical …","","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","Calculates the factorial of a given <code>f64</code> number. Returns …","Calculates the Fibonacci number at a given <code>f64</code> index, …","Checks whether the given <code>f64</code> number is even. Returns true …","Checks whether the given <code>f64</code> number is odd. Returns true …","Determines whether <code>number</code> is a perfect cube by comparing …","Determines if the given <code>f64</code> number is a perfect power by …","Determines whether <code>number</code> is a perfect square by comparing …","Returns true if the given <code>f64</code> number is prime. This …","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","This function takes two <code>f64</code> numbers as arguments: <code>left</code> and …","This function takes two <code>f64</code> numbers as arguments, <code>left</code> and …","The <code>base</code> module provides a collection of mathematical …","","<code>add</code> function: Takes in two i128 integers <code>left</code> and <code>right</code> as …","<code>divide</code> function: Takes in two i128 integers <code>left</code> and <code>right</code> …","<code>factorial</code> function: Takes an i128 integer <code>number</code> as input …","<code>fibonacci</code> function: Takes an i128 integer <code>number</code> as input …","<code>is_even</code> function: Takes an i128 integer <code>number</code> as input …","<code>is_odd</code> function: Takes an i128 integer <code>number</code> as input and …","<code>is_perfect_cube</code> function: Takes an i128 integer <code>number</code> as …","<code>is_perfect_power</code> function: Takes an i128 integer <code>number</code> as …","<code>is_perfect_square</code> function: Takes an i128 integer <code>number</code> …","<code>is_prime</code> function: Takes an i128 integer <code>number</code> as input …","<code>modulo</code> function: Takes two i128 integers <code>left</code> and <code>right</code> as …","<code>multiply</code> function: Takes in two i128 integers <code>left</code> and …","<code>power</code> function: Takes in two i128 integers <code>left</code> and <code>right</code> …","<code>root</code> function: Takes two i128 integers <code>left</code> and <code>right</code> as …","<code>subtract</code> function: Takes two i128 integers <code>left</code> and <code>right</code> …","single_vector module provides a set of functions for …","","Computes the interquartile range (IQR) of a given vector …","Computes the interquartile range (IQR) of a given vector …","Calculates the mean of a given vector of 128-bit signed …","Calculates the mean of a given vector of 64-bit …","Calculates the median value of a vector containing 128-bit …","Calculates the median value of a given vector of 64-bit …","","","Returns the product of all elements in a vector of 128-bit …","Computes the product of all elements in a given vector of …","Computes the first (Q1), second (Q2), and third (Q3) …","Returns a formatted string containing the first (Q1), …","Calculates the range of a given vector of 128-bit signed …","Calculates the range of a given vector of 64-bit …","Calculates the standard deviation of a given vector of …","Calculates the standard deviation of a given vector of …","Returns the sum of all elements in a vector of 128-bit …","Computes the sum of all elements in a given vector of …","Calculates the variance of a given vector of 128-bit …","Calculates the variance of a given vector of 64-bit …"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,14,12,13,14,12,13,14,12,13,14,13,14,12,13,14,13,14,12,12,12,13,14,12,12,12,13,14,12,12,13,14,13,14,13,14,13,14,12,13,14,12,13,14,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[1,2,[4,[3]]]],[[]],[[]],[[[4,[5]],[4,[[4,[3]]]]],[[6,[1,2]]]],[[]],[[1,2],[[6,[[4,[3]],2]]]],[1,3],[[1,2],[[6,[3,2]]]],[[1,3],[[6,[5,2]]]],[1,[[4,[5]]]],[1,[[4,[[4,[3]]]]]],[1,7],[[]],[[],1],[[],6],[[],6],[[],8],0,0,[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],[[6,[5,[11,[10]]]]]],[[[4,[9]],[4,[9]]],[[6,[5,[11,[10]]]]]],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],[[[4,[3]],[4,[3]]],5],[[[4,[9]],[4,[9]]],5],0,0,0,0,0,[[12,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,3],[14,9],[13,3],[14,9],[12,3],[13,15],[14,15],[13,3],[14,9],[12,3],[[12,7],3],[12,[[4,[3]]]],[[]],[[]],[[]],[12,16],[[12,7],3],[[3,3,15],13],[[9,9,15],14],[[[4,[3]]],12],[[12,7]],[[13,3]],[[14,9]],[[13,3]],[[14,9]],[[13,15]],[[14,15]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[],8],0,0,[[9,9],9],[[9,9],9],[9,9],[9,9],[9,16],[9,16],[9,16],[9,16],[9,16],[9,16],[[9,9],9],[[9,9],9],[[9,9],9],[[9,9],9],[[9,9],9],0,0,[[3,3],3],[[3,3],3],[3,3],[3,3],[3,16],[3,16],[3,16],[3,16],[3,16],[3,16],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],0,0,[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],5],[[[4,[9]]],5],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],5],[[[4,[9]]],9],[[[4,[3]]],3],[[[4,[9]]],9],[[[4,[3]]],5],[[[4,[9]]],9]],"c":[],"p":[[3,"DataFrame"],[15,"str"],[15,"i128"],[3,"Vec"],[3,"String"],[4,"Result"],[15,"usize"],[3,"TypeId"],[15,"f64"],[8,"Error"],[3,"Box"],[3,"ZeroEquation"],[3,"Equation"],[3,"EquationF"],[15,"char"],[15,"bool"]]},\
"ordered_float":{"doc":"Wrappers for total order on Floats.  See the <code>OrderedFloat</code> …","t":"LLLLLLLLLLLLLLLLLLLLIDNLLLLLLLLDDLLNELLKLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLLLLLLLLLLLKLLKLLLKLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLKLLKLLKLLLLKLLLLKLLLKLLLLLKLLKLLKLLKLLKLLKLLKLLLLLLLKLLKLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLKLLKLLLLLLLLKLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLKLLKLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLL","n":["E","E","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","Float","FloatIsNan","IsNaN","LN_10","LN_10","LN_2","LN_2","LOG10_E","LOG10_E","LOG2_E","LOG2_E","NotNan","OrderedFloat","PI","PI","ParseFloatError","ParseNotNanError","SQRT_2","SQRT_2","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_f32","as_mut","as_ref","as_ref","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","copysign","cos","cos","cos","cosh","cosh","cosh","default","default","deref","deref","deref_mut","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f64","from_f64","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_str","from_str","from_str_radix","from_str_radix","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","hash","hash","hypot","hypot","hypot","infinity","infinity","infinity","integer_decode","integer_decode","integer_decode","into","into","into","into","into_inner","into_inner","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_normal","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","min","min","min","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","nan","nan","neg","neg","neg","neg","neg_infinity","neg_infinity","neg_infinity","neg_zero","neg_zero","neg_zero","new","new_unchecked","one","one","partial_cmp","partial_cmp","powf","powf","powf","powi","powi","powi","powi","product","product","product","product","provide","provide","recip","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","round","round","round","round","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","source","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_degrees","to_degrees","to_degrees","to_degrees","to_f32","to_f32","to_f64","to_f64","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unchecked_new","zero","zero"],"q":[[0,"ordered_float"]],"d":["","","","","","","","","","","","","","","","","","","","","Generic trait for floating point numbers","An error indicating an attempt to construct NotNan from a …","The parsed float value resulted in a NaN.","","","","","","","","","A wrapper around floats providing an implementation of <code>Eq</code>, …","A wrapper around floats providing implementations of <code>Eq</code>, …","","","A plain parse error from the underlying float type.","An error indicating a parse error from a string for <code>NotNan</code>.","","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","","","","","","The positive difference of two numbers.","","","","","Computes the arccosine of a number. Return value is in …","","","Inverse hyperbolic cosine function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this <code>NotNan</code><code>&lt;</code><code>f64</code><code>&gt;</code> to a <code>NotNan</code><code>&lt;</code><code>f32</code><code>&gt;</code> while giving up …","","","","Computes the arcsine of a number. Return value is in …","","","Inverse hyperbolic sine function.","","","Computes the arctangent of a number. Return value is in …","","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","","","Inverse hyperbolic tangent function.","","","","","","","","","","","","","Take the cubic root of a number.","","","Returns the smallest integer greater than or equal to a …","","","","Returns the floating point category of the number. If only …","","","","","","","","","","","","","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","","","Hyperbolic cosine function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns epsilon, a small positive value.","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","","","Returns <code>2^(self)</code>.","","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","","Returns the largest integer less than or equal to a number.","","","","","","","","","","","","","","Returns the fractional part of a number.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Convert a &amp;str to <code>OrderedFloat</code>. Returns an error if the …","Convert a &amp;str to <code>NotNan</code>. Returns an error if the string …","","","","","","","","","","","","","","","Calculate the length of the hypotenuse of a right-angle …","","","Returns the infinite value.","","","Returns the mantissa, base 2 exponent, and sign as …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the value out.","Get the value out.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is positive infinity or …","","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","","","","","Returns <code>true</code> if the number is neither zero, infinite, …","","","","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","","","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","","","","","","Returns the natural logarithm of the number.","","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","","","Returns the logarithm of the number with respect to an …","","","Returns the base 10 logarithm of the number.","","","Returns the base 2 logarithm of the number.","","","Returns the maximum of the two numbers.","","","Returns the largest finite value that this type can …","","","","","","","","Returns the minimum of the two numbers.","","","Returns the smallest positive, normalized value that this …","","","","Returns the smallest finite value that this type can …","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","","","Returns the negative infinite value.","","","Returns <code>-0.0</code>.","","","Create a <code>NotNan</code> value.","Create a <code>NotNan</code> value from a value that is guaranteed to …","","","","","Raise a number to a floating point power.","","","Raise a number to an integer power.","","","","","","","","","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the nearest integer to a number. Round half-way …","","","","Returns a number that represents the sign of <code>self</code>.","","","","","","Computes the sine of a number (in radians).","","","Simultaneously computes the sine and cosine of the number, …","","","Hyperbolic sine function.","","","","Take the square root of a number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","","","Hyperbolic tangent function.","","","Converts radians to degrees.","","","","","","","","","","","","","","","","","","","","","","Converts degrees to radians.","","","","","","","","","","","","","","","","","","Return the integer part of a number.","","","","","","","","","","","","","","","","","","Create a <code>NotNan</code> value from a value that is guaranteed to …","",""],"i":[2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,0,23,2,3,2,3,2,3,2,3,0,0,2,3,23,0,2,3,4,2,2,2,2,3,4,2,2,2,3,4,2,2,4,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,4,2,2,4,2,2,4,2,2,4,2,2,4,2,2,2,3,3,3,22,23,2,3,22,23,4,2,2,4,2,2,2,4,2,2,2,3,22,23,2,3,22,23,2,3,4,4,2,2,4,2,2,2,3,2,3,2,22,23,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,3,3,3,3,4,2,2,2,2,2,3,3,22,23,4,2,2,4,2,2,4,2,2,4,2,2,2,2,2,2,2,3,3,22,22,23,23,4,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,22,23,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,4,2,2,4,2,2,4,2,2,2,3,22,23,2,3,4,2,2,4,2,2,4,2,2,2,3,4,2,2,2,3,4,2,2,2,4,2,2,2,2,3,4,2,2,4,2,2,4,2,2,4,2,2,4,2,2,4,2,2,4,2,2,2,2,2,3,3,4,2,2,4,2,2,2,4,2,2,2,2,2,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,2,2,2,2,2,2,3,3,3,3,4,2,2,2,2,3,3,4,2,2,4,2,2,3,3,2,3,2,3,4,2,2,4,2,2,2,2,2,3,3,22,23,4,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,3,3,3,3,4,2,2,2,4,2,2,2,2,3,4,2,2,4,2,2,4,2,2,23,4,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,3,3,3,3,2,2,3,3,4,2,2,4,2,2,4,2,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,22,23,4,2,2,2,2,3,22,23,2,3,2,3,2,3,2,3,2,3,4,2,2,2,2,3,3,3,22,23,2,3,22,23,2,3,22,23,3,2,3],"f":[[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],0,0,0,[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[2,[1]]]],[[],[[3,[1]]]],0,0,[[],[[2,[1]]]],[[],[[3,[1]]]],0,0,[[],[[2,[1]]]],[[],[[3,[1]]]],[[]],[[[2,[[0,[4,5]]]]],[[2,[[0,[4,5]]]]]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[]],[[[3,[[0,[4,5]]]]],[[3,[[0,[4,5]]]]]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[[2,[[0,[4,5]]]],[2,[[0,[4,5]]]]],[[2,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]],[[3,[[0,[4,5]]]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[2],[2],[[[2,[[6,[[6,[[6,[6]]]]]]]],[2,[[6,[[6,[[6,[6]]]]]]]]]],[[2,2]],[[[2,[6]],6]],[[[2,[[6,[[6,[[6,[6]]]]]]]],[6,[[6,[[6,[[6,[6]]]]]]]]]],[[[2,[6]],[2,[6]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]],[[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4],[[3,[4]]]],[[[2,[7]],[2,[7]]]],[[[2,[[7,[[7,[[7,[7]]]]]]]],[7,[[7,[[7,[[7,[7]]]]]]]]]],[[[2,[7]],7]],[[[2,[[7,[[7,[[7,[7]]]]]]]],[2,[[7,[[7,[[7,[7]]]]]]]]]],[[[3,[[0,[4,7]]]],[0,[4,7]]]],[[[3,[[0,[4,7]]]],[3,[[0,[4,7]]]]]],[[[3,[[0,[4,7]]]],[3,[[0,[4,7]]]]]],[[[3,[[0,[4,7]]]],[0,[4,7]]]],[[[2,[8]]],8],[[[2,[8]]],9],[[[2,[10]]],[[2,[8]]]],[[[2,[8]]],[[2,[8]]]],[[[2,[8]]],[[2,[10]]]],[[[2,[10]]],11],[[[2,[8]]],11],[[[2,[10]]],12],[[[2,[8]]],13],[[[2,[8]]],14],[[[2,[8]]],15],[[[2,[8]]],10],[[[2,[10]]],8],[[[2,[10]]],14],[[[2,[8]]],12],[[[2,[10]]],10],[[[2,[8]]],16],[[[2,[10]]],16],[[[2,[10]]],17],[[[2,[10]]],18],[[[2,[8]]],18],[[[2,[10]]],13],[[[2,[10]]],15],[[[2,[10]]],9],[[[2,[10]]],19],[[[2,[8]]],17],[[[2,[8]]],19],[[[2,[10]]],[[2,[10]]]],[[[3,[10]]],12],[[[3,[10]]],13],[[[3,[10]]],15],[[[3,[8]]],10],[[[3,[8]]],[[3,[10]]]],[[[3,[8]]],8],[[[3,[8]]],16],[[[3,[8]]],12],[[[3,[8]]],18],[[[3,[10]]],9],[[[3,[10]]],17],[[[3,[10]]],19],[[[3,[10]]],16],[[[3,[10]]],[[3,[10]]]],[[[3,[8]]],9],[[[3,[8]]],19],[[[3,[10]]],11],[[[3,[8]]],15],[[[3,[8]]],13],[[[3,[10]]],18],[[[3,[10]]],8],[[[3,[8]]],[[3,[8]]]],[[[3,[8]]],11],[[[3,[10]]],14],[[[3,[8]]],14],[[[3,[8]]],17],[[[3,[10]]],[[3,[8]]]],[[[3,[10]]],10],[[[3,[10]]],[[3,[8]]]],[[[2,[4]]],4],[[[2,[4]]],4],[[[3,[4]]],4],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[3,[8]]],8],[[[3,[10]]],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[],20],[[[2,[4]]],20],[[[2,[4]]],20],[[[2,[21]]],[[2,[21]]]],[[[3,[21]]],[[3,[21]]]],[22,22],[[[23,[21]]],[[23,[21]]]],[[]],[[]],[[]],[[]],[[[2,[4]],[2,[4]]],24],[[[3,[4]],[3,[4]]],24],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[],[[2,[25]]]],[[],[[3,[25]]]],[[[2,[4]]]],[[[3,[4]]]],[[[2,[4]]]],[22,26],[[[23,[[0,[27,28]]]]],26],[[[2,[29]],[2,[29]]]],[[[2,[29]],29]],[[[2,[[29,[[29,[[29,[29]]]]]]]],[2,[[29,[[29,[[29,[29]]]]]]]]]],[2],[[2,2]],[[[2,[[29,[[29,[[29,[29]]]]]]]],[29,[[29,[[29,[[29,[29]]]]]]]]]],[2],[[[3,[4]],4],[[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]],[[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4]],[[[2,[[30,[[30,[[30,[30]]]]]]]],[2,[[30,[[30,[[30,[30]]]]]]]]]],[[[2,[30]],30]],[[[2,[30]],[2,[30]]]],[[[2,[[30,[[30,[[30,[30]]]]]]]],[30,[[30,[[30,[[30,[30]]]]]]]]]],[[[3,[[0,[4,30]]]],[0,[4,30]]]],[[[3,[[0,[4,30]]]],[3,[[0,[4,30]]]]]],[[[3,[[0,[4,30]]]],[3,[[0,[4,30]]]]]],[[[3,[[0,[4,30]]]],[0,[4,30]]]],[[]],[[]],[[],[[2,[4]]]],[[],[[2,[4]]]],[[[2,[4]],4],31],[[[2,[4]],[2,[4]]],31],[[[3,[32]],[3,[32]]],31],[[[3,[4]],4],31],[[22,22],31],[[[23,[32]],[23,[32]]],31],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[[2,[[0,[4,33]]]],34],35],[[[2,[[0,[4,36]]]],34],35],[[[2,[27]],34],35],[[[2,[[0,[4,37]]]],34],35],[[[3,[27]],34],35],[[[3,[[0,[4,33]]]],34],35],[[22,34],35],[[22,34],35],[[[23,[33]],34],35],[[[23,[27]],34],35],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[4,[[2,[4]]]],[4,[[2,[4]]]],[4,[[2,[4]]]],[[]],[38,[[40,[[2,[39]]]]]],[38,[[40,[[3,[4]]]]]],[14,[[3,[10]]]],[[[3,[8]]],[[3,[10]]]],[12,[[3,[8]]]],[15,[[3,[8]]]],[13,[[3,[10]]]],[[]],[17,[[3,[8]]]],[18,[[3,[8]]]],[12,[[3,[10]]]],[17,[[3,[10]]]],[18,[[3,[10]]]],[15,[[3,[10]]]],[[]],[[]],[8,[[40,[[2,[41]]]]]],[8,[[40,[[3,[[0,[4,41]]]]]]]],[10,[[40,[[2,[41]]]]]],[10,[[40,[[3,[[0,[4,41]]]]]]]],[18,[[40,[[2,[41]]]]]],[18,[[40,[[3,[[0,[4,41]]]]]]]],[14,[[40,[[2,[41]]]]]],[14,[[40,[[3,[[0,[4,41]]]]]]]],[16,[[40,[[2,[41]]]]]],[16,[[40,[[3,[[0,[4,41]]]]]]]],[12,[[40,[[2,[41]]]]]],[12,[[40,[[3,[[0,[4,41]]]]]]]],[19,[[40,[[2,[41]]]]]],[19,[[40,[[3,[[0,[4,41]]]]]]]],[26,[[43,[[2,[42]]]]]],[26,[[43,[[3,[[0,[4,42]]]]]]]],[[26,13],[[43,[[2,[[0,[4,44]]]]]]]],[[26,13],[[43,[[3,[4]]]]]],[17,[[40,[[2,[41]]]]]],[17,[[40,[[3,[[0,[4,41]]]]]]]],[13,[[40,[[2,[41]]]]]],[13,[[40,[[3,[[0,[4,41]]]]]]]],[9,[[40,[[2,[41]]]]]],[9,[[40,[[3,[[0,[4,41]]]]]]]],[15,[[40,[[2,[41]]]]]],[15,[[40,[[3,[[0,[4,41]]]]]]]],[11,[[40,[[2,[41]]]]]],[11,[[40,[[3,[[0,[4,41]]]]]]]],[[[2,[4]],45]],[[[3,[4]],45]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[]],[[],[[2,[4]]]],[[],[[2,[4]]]],[[]],[[[2,[4]]]],[[[2,[4]]]],[[]],[[]],[[]],[[]],[[[2,[4]]],4],[3],[[],31],[[[2,[4]]],31],[[[2,[4]]],31],[[],31],[[[2,[4]]],31],[[[2,[4]]],31],[[],31],[[[2,[4]]],31],[[[2,[4]]],31],[[[2,[[0,[4,5]]]]],31],[[[3,[[0,[4,5]]]]],31],[[],31],[[[2,[4]]],31],[[[2,[4]]],31],[[[2,[[0,[4,5]]]]],31],[[[3,[[0,[4,5]]]]],31],[[],31],[[],31],[[[2,[4]]],31],[[[2,[4]]],31],[[],31],[[[2,[4]]],31],[[],31],[[[2,[4]]],31],[[[2,[46]]],31],[[[3,[4]]],31],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[],[[2,[47]]]],[[]],[[]],[[],[[3,[4]]]],[[]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[]],[[]],[[],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[],[[2,[47]]]],[[],[[3,[4]]]],[[]],[[[2,[48]],[2,[48]]]],[[[2,[[48,[[48,[[48,[48]]]]]]]],[48,[[48,[[48,[[48,[48]]]]]]]]]],[2],[2],[[[2,[48]],48]],[[2,2]],[[[2,[[48,[[48,[[48,[48]]]]]]]],[2,[[48,[[48,[[48,[48]]]]]]]]]],[[[3,[4]],4]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4],[[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]],[[3,[4]]]],[[]],[[[2,[4]],[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[[[2,[[49,[[49,[[49,[49]]]]]]]],[2,[[49,[[49,[[49,[49]]]]]]]]]],[[[2,[49]],49]],[[[2,[[49,[[49,[[49,[49]]]]]]]],[49,[[49,[[49,[[49,[49]]]]]]]]]],[[[2,[49]],[2,[49]]]],[[[3,[[0,[4,49]]]],[3,[[0,[4,49]]]]]],[[[3,[[0,[4,49]]]],[0,[4,49]]]],[[[3,[[0,[4,49]]]],[3,[[0,[4,49]]]]]],[[[3,[[0,[4,49]]]],[0,[4,49]]]],[[]],[[],[[2,[4]]]],[[],[[2,[4]]]],[[[2,[50]]]],[2],[[[3,[4]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[],[[2,[4]]]],[[],[[2,[4]]]],[[]],[[],[[2,[4]]]],[[],[[2,[4]]]],[4,[[43,[[3,[4]],22]]]],[[],3],[[],[[2,[51]]]],[[],[[3,[4]]]],[[[2,[4]],[2,[4]]],[[40,[24]]]],[[[3,[52]],[3,[52]]],[[40,[24]]]],[[]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[]],[14],[[[2,[4]],14],[[2,[4]]]],[[[2,[4]],14],[[2,[4]]]],[14],[53,[[2,[[0,[4,54]]]]]],[53,[[2,[[0,[4,54]]]]]],[53,[[3,[[0,[4,54]]]]]],[53,[[3,[[0,[4,54]]]]]],[55],[55],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[2],[2],[[[2,[[56,[[56,[[56,[56]]]]]]]],[2,[[56,[[56,[[56,[56]]]]]]]]]],[[2,2]],[[[2,[56]],[2,[56]]]],[[[2,[56]],56]],[[[2,[[56,[[56,[[56,[56]]]]]]]],[56,[[56,[[56,[[56,[56]]]]]]]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],4],[[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]],[[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],4]],[[[2,[[57,[[57,[[57,[57]]]]]]]],[2,[[57,[[57,[[57,[57]]]]]]]]]],[[[2,[[57,[[57,[[57,[57]]]]]]]],[57,[[57,[[57,[[57,[57]]]]]]]]]],[[[2,[57]],57]],[[[2,[57]],[2,[57]]]],[[[3,[[0,[4,57]]]],[3,[[0,[4,57]]]]]],[[[3,[[0,[4,57]]]],[0,[4,57]]]],[[[3,[[0,[4,57]]]],[0,[4,57]]]],[[[3,[[0,[4,57]]]],[3,[[0,[4,57]]]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[[2,[[0,[4,5]]]]],[[2,[[0,[4,5]]]]]],[[]],[[[3,[[0,[4,5]]]]],[[3,[[0,[4,5]]]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[]],[[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[23,[[0,[27,28]]]]],[[40,[28]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[58]],[2,[58]]]],[[[2,[58]],58]],[[[2,[[58,[[58,[[58,[58]]]]]]]],[58,[[58,[[58,[[58,[58]]]]]]]]]],[2],[2],[[[2,[[58,[[58,[[58,[58]]]]]]]],[2,[[58,[[58,[[58,[58]]]]]]]]]],[[2,2]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],[3,[4]]],[[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],[3,[4]]]],[[[3,[4]],4]],[[[3,[4]],4],[[3,[4]]]],[[[3,[4]],4]],[[[2,[[59,[[59,[[59,[59]]]]]]]],[59,[[59,[[59,[[59,[59]]]]]]]]]],[[[2,[59]],59]],[[[2,[59]],[2,[59]]]],[[[2,[[59,[[59,[[59,[59]]]]]]]],[2,[[59,[[59,[[59,[59]]]]]]]]]],[[[3,[[0,[4,59]]]],[3,[[0,[4,59]]]]]],[[[3,[[0,[4,59]]]],[3,[[0,[4,59]]]]]],[[[3,[[0,[4,59]]]],[0,[4,59]]]],[[[3,[[0,[4,59]]]],[0,[4,59]]]],[53,[[2,[[0,[4,60]]]]]],[53,[[2,[[0,[4,60]]]]]],[53,[[3,[[0,[4,60]]]]]],[53,[[3,[[0,[4,60]]]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[38]]],[[40,[8]]]],[[[3,[4]]],[[40,[8]]]],[[[2,[38]]],[[40,[10]]]],[[[3,[4]]],[[40,[10]]]],[[[2,[38]]],[[40,[18]]]],[[[3,[4]]],[[40,[18]]]],[[[2,[38]]],[[40,[14]]]],[[[3,[4]]],[[40,[14]]]],[[[2,[38]]],[[40,[16]]]],[[[3,[4]]],[[40,[16]]]],[[[2,[38]]],[[40,[12]]]],[[[3,[4]]],[[40,[12]]]],[[[2,[38]]],[[40,[19]]]],[[[3,[4]]],[[40,[19]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[]],[[],61],[[],61],[[],61],[[],61],[[[2,[38]]],[[40,[17]]]],[[[3,[4]]],[[40,[17]]]],[[[2,[38]]],[[40,[13]]]],[[[3,[4]]],[[40,[13]]]],[[[2,[38]]],[[40,[9]]]],[[[3,[4]]],[[40,[9]]]],[[[2,[38]]],[[40,[15]]]],[[[3,[4]]],[[40,[15]]]],[[[2,[38]]],[[40,[11]]]],[[[3,[4]]],[[40,[11]]]],[[]],[[[2,[4]]],[[2,[4]]]],[[[2,[4]]],[[2,[4]]]],[[]],[[],43],[8,[[43,[[3,[8]]]]]],[10,[[43,[[3,[10]]]]]],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],62],[[],62],[[],62],[[],62],[[],3],[[],[[2,[46]]]],[[],[[3,[4]]]]],"c":[589],"p":[[8,"FloatConst"],[3,"OrderedFloat"],[3,"NotNan"],[8,"Float"],[8,"Signed"],[8,"Add"],[8,"AddAssign"],[15,"f32"],[15,"u64"],[15,"f64"],[15,"usize"],[15,"i8"],[15,"u32"],[15,"i32"],[15,"u8"],[15,"i64"],[15,"u16"],[15,"i16"],[15,"isize"],[4,"FpCategory"],[8,"Clone"],[3,"FloatIsNan"],[4,"ParseNotNanError"],[4,"Ordering"],[8,"Default"],[15,"str"],[8,"Debug"],[8,"Error"],[8,"Div"],[8,"DivAssign"],[15,"bool"],[8,"PartialEq"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"UpperExp"],[8,"LowerExp"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[8,"FromPrimitive"],[8,"FromStr"],[4,"Result"],[8,"Num"],[8,"Hasher"],[8,"Zero"],[8,"Bounded"],[8,"Mul"],[8,"MulAssign"],[8,"Neg"],[8,"One"],[8,"PartialOrd"],[8,"Iterator"],[8,"Product"],[3,"Demand"],[8,"Rem"],[8,"RemAssign"],[8,"Sub"],[8,"SubAssign"],[8,"Sum"],[3,"String"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
